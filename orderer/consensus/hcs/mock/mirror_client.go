// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"
	"time"

	hedera "github.com/hashgraph/hedera-sdk-go"
	"github.com/hyperledger/fabric/orderer/consensus/hcs/factory"
)

type MirrorClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	SubscribeTopicStub        func(hedera.ConsensusTopicID, *time.Time, *time.Time) (factory.MirrorSubscriptionHandle, error)
	subscribeTopicMutex       sync.RWMutex
	subscribeTopicArgsForCall []struct {
		arg1 hedera.ConsensusTopicID
		arg2 *time.Time
		arg3 *time.Time
	}
	subscribeTopicReturns struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}
	subscribeTopicReturnsOnCall map[int]struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MirrorClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *MirrorClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *MirrorClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *MirrorClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *MirrorClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MirrorClient) SubscribeTopic(arg1 hedera.ConsensusTopicID, arg2 *time.Time, arg3 *time.Time) (factory.MirrorSubscriptionHandle, error) {
	fake.subscribeTopicMutex.Lock()
	ret, specificReturn := fake.subscribeTopicReturnsOnCall[len(fake.subscribeTopicArgsForCall)]
	fake.subscribeTopicArgsForCall = append(fake.subscribeTopicArgsForCall, struct {
		arg1 hedera.ConsensusTopicID
		arg2 *time.Time
		arg3 *time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SubscribeTopic", []interface{}{arg1, arg2, arg3})
	fake.subscribeTopicMutex.Unlock()
	if fake.SubscribeTopicStub != nil {
		return fake.SubscribeTopicStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.subscribeTopicReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MirrorClient) SubscribeTopicCallCount() int {
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	return len(fake.subscribeTopicArgsForCall)
}

func (fake *MirrorClient) SubscribeTopicCalls(stub func(hedera.ConsensusTopicID, *time.Time, *time.Time) (factory.MirrorSubscriptionHandle, error)) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = stub
}

func (fake *MirrorClient) SubscribeTopicArgsForCall(i int) (hedera.ConsensusTopicID, *time.Time, *time.Time) {
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	argsForCall := fake.subscribeTopicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *MirrorClient) SubscribeTopicReturns(result1 factory.MirrorSubscriptionHandle, result2 error) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = nil
	fake.subscribeTopicReturns = struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}{result1, result2}
}

func (fake *MirrorClient) SubscribeTopicReturnsOnCall(i int, result1 factory.MirrorSubscriptionHandle, result2 error) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = nil
	if fake.subscribeTopicReturnsOnCall == nil {
		fake.subscribeTopicReturnsOnCall = make(map[int]struct {
			result1 factory.MirrorSubscriptionHandle
			result2 error
		})
	}
	fake.subscribeTopicReturnsOnCall[i] = struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}{result1, result2}
}

func (fake *MirrorClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MirrorClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
